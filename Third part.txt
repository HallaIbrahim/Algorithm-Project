      for (int j = i - 1; j >= 0; j--) {
            // If the previous job ends before the current job starts, then update the previous job index.
            if (jobs[j].end <= jobs[i].start) {
                prevJobIndex = j;
                currProfit += maxProfit[prevJobIndex];
                break;
            }
        }
        // Update the maximum profit for the current job.
        maxProfit[i] = max(currProfit, maxProfit[i - 1]);
    }
    // Return the maximum profit.
    return maxProfit[jobs.size() - 1];
}
int main() {
    // Create a vector of jobs.
    vector<Job> jobs{{1, 6, 6}, {2, 5, 5}, {5, 7, 5}, {6, 8, 3}};
    // Print the maximum profit.
    cout << maxProfit(jobs) << endl;

    return 0;
}
